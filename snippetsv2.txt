== How it works
* storing the snippet
1. we store the snippets in a format ${1:...}
2. snippet file is parsed and then stored in a dictionary for the lookup

* expanding the snippets
1. when a keyword is found we load the apropriate snippet into the memory
2. once its loaded we parse the ${1:...} tab triggers in a list with:
  - line
  - column
  - placeholder text if existant
  - list corresponding expansions denoted by $1

  ( 
   there are 2 ways of handling nested snippets:

   1. instead of the placeholder text we hold a another list with
      a) placeholder and
      b) another trigger list

   2. we parse it as is and add 
      a) a flag as to whether we are in the placeholder context and
      b) the index of the tab trigger in which's context we are

   3. we parse it as is and don't add anything
      a) when we deleted anything on a position of another trigger
        delete the trigger
  )
3. add CursorMovedI and InsertEnter triggers
4. implement function that updates all triggers for a specific line
( optimal way of updating triggers )

* ways to update snippet positions
1. always update the whole snippet.
  a) we will store the snippet as plaintext
  b) when we enter text on a placeholder we will remember that we are on the placeholder
    that way it should be easy for us to update the plaintext accordingly
  c) the whole snippet is getting inserted each time you type something
  d) store the current cursor position for putting the cursor back in place when where
    it belongs
  e) when we update part of the string update the snippet thne detect the line to replace
    and ultimately replace it

  this kind of editing makes it unnecesarry to track line numbers and makes
  it easier to update the modified places

  caveats:
  - we need to store the line of the snippet expansion.
  - we will need to calculate the absolute position of the trigger in our snippet buffer
  - col($)


2. only update part of the snippet
  - we will need to detect the currently changed text for 
  a) once the snippet is parsed store it as list for the newlines
  b) 

  this way we will have problems tracking snippets that have  multiline triggers

== Brainstorming on the new snippet engine

- tab triggers are stored in a fifo queue

== First implementation

- implement the snippet triggers line based
- implement the multiple snippets by parsing all triggers of a line

1. split snippet by line
2. add current indent level to the beginning
3. parse all triggers by line, assume that they are not multiline

  * Handling the trigger update
    - 3 hashs:
      1. id, list of tab stops, list of completions
      2. line, list of tab stops, list of ...
      1. line, triggers - tells us whether a trigger exists in a specific line, contains a list of triggers for a line
        this is a reverse lookup list
      2. id, line, col, update only /* denotes whether the snippet is tab reachable or not*/, placeholder text


  * getting all marks
    - because we wan't to balance the triggers we need to parse them before we split the lines
    - then we get a list of newlines and convert the col only format to column + line
    - then remove the tags and update the mark positions
